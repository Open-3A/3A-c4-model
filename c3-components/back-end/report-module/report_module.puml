@startuml Report Module

!include https://raw.githubusercontent.com/adrianvlupu/C4-PlantUML/latest/C4_Component.puml

LAYOUT_WITH_LEGEND()

System(ai, "Asset Analysis AI", "Modelo responsável pelo cálculo de métricas de investimento e geração de relatórios.")
System_Ext(mail, "Sistema de e-mail", "Sistema de envio de e-mails usando SMTP do Gmail para confirmação de criação de conta e redefinição de senha.")

Container(security_module, "Módulo de segurança", "Java / Spring Security", "Responsável pela autenticação e autorização de usuários via JWT.")

Boundary(report_module, "Módulo de relatório"){
  Component(report_api, "API", "Spring Web", "Expoem os casos de uso de relatórios via API REST.")
  Component(report_service, "Serviço de aplicação", "Spring Framework", "Contém a lógica de aplicação, executa casos de uso e realiza o mapeamento de entidades.")
  Component(report_mapper, "Mapeador", "MapStruct", "Realiza o mapeamento entre entidades de domínio e DTO (DataBase Entity e DTO).")
  Component(report_gateway, "AI Gateway", "Spring Web", "Envia solicitações de criação de relatórios para a inteligência artificial.")

  Boundary(report_use_cases, "Casos de uso"){
    Boundary(internal, "Interno da aplicação"){
      Component(request_report_creation_use_case, "Solicita criação de relatório", "Spring Framework", "Solicita a criação de um relatório diário com base nas funcionalidades desbloqueadas pelo usuário.")
      Component(notify_daily_report, "Notifica sobre o relatório diário", "Spring Framework", "Envia notificações ao usuário sobre a disponibilidade do novo relatório.")
      Component(get_unlocked_features_use_case, "Obtém funcionalidades desbloqueadas", "Spring Framework", "Obtém as funcionalidades (upgrades) adquiridas na loja pelo usuário.")
    }
    Boundary(only_admin_investor, "Apenas Investidores e Administradores"){
      Component(list_reports_use_case, "Listagem dos relatórios", "Spring Framework", "Lista os relatórios com paginação, respeitando os filtros aplicados pelo usuário.")
    }
  }

  Component(report_repository, "Repositório de relatório", "Spring Data JPA", "Realiza consultas e inserções de relatórios de usuários.")
  Component(user_repository, "Repositório de usuário", "Spring Data JPA", "Realiza consultas e atualizações nas funcionalidades desbloqueadas dos usuários no banco de dados.")
}

ContainerDb(db, "Banco de dados", "MongoDB", "Banco de dados não relacional; cada registro possui um atributo 'version' para evitar inconsistências ao versionar a API.")

Rel(security_module, report_api, "Faz requisições (apenas para Investidores)")
Rel(report_api, report_service, "Utiliza")
Rel(report_service, report_use_cases, "Executa")
Rel(report_service, report_mapper, "Realiza o mapeamento de entidades")
Rel(request_report_creation_use_case, report_gateway, "Utiliza")
Rel(report_gateway, ai, "Faz solicitação (JSON/HTTPS)")
Rel(ai, report_gateway, "Recebe o relatório (Plain Text - Markdown)")
Rel(report_repository, db, "Utiliza")
Rel(request_report_creation_use_case, get_unlocked_features_use_case, "Utiliza")
Rel(get_unlocked_features_use_case, user_repository, "Consulta dados do usuário")
Rel(user_repository, db, "Utiliza")
Rel(notify_daily_report, mail, "Envia e-mail de notificação")
Rel(list_reports_use_case, report_repository, "Consulta relatórios")

@enduml